[tool.poetry]
name = "ppd-forms"
version = "0.1.0"
description = "Приложение для создания типовых отчетов ППД"
authors = ["sidelkin <sidelkin@yandex.ru>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
python-dateutil = "^2.8.2"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.25"}
asyncpg = "^0.28.0"
arq = "^0.25.0"
taskipy = "^1.12.0"
fastapi = "^0.103.1"
websockets = "^11.0.3"
uvicorn = {extras = ["standard"], version = "^0.23.2"}
pydantic = "^2.3.0"
jinja2 = "^3.1.2"
python-multipart = "^0.0.6"
pydantic-settings = "^2.0.3"
itsdangerous = "^2.1.2"
oracledb = "^1.4.1"
tenacity = "^8.2.3"
pandas = {extras = ["excel", "performance", "pyarrow"], version = "^2.2.0"}
aiocsv = "^1.2.4"
aiofiles = "^23.2.1"
alembic = "^1.12.0"
redis = {version = "5.0.0", extras = ["hiredis"]}
pyyaml = "^6.0.1"
colorlog = "^6.8.2"
ldap3 = "^2.9.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
pyarrow = "^15.0.0"

[tool.poetry.group.dev.dependencies]
absolufy-imports = "^0.3.1"
pre-commit = "^3.4.0"
mypy = "^1.6.1"
pytest = "^7.4.3"
httpx = "^0.26.0"
testcontainers = {extras = ["postgresql"], version = "^3.7.1"}
flake8-pyproject = "^1.2.3"
coverage = {extras = ["toml"], version = "^7.4.0"}
csv-diff = "^1.1"
pytest-asyncio = "^0.23.3"
types-aiofiles = "^23.2.0.20240106"
types-python-dateutil = "^2.8.19.20240106"
pandas-stubs = "^2.1.4.231227"
types-pyyaml = "^6.0.12.12"
types-python-jose = "^3.3.4.20240106"
types-ldap3 = "^2.9.13.20240119"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.tasks]
makemigrations = 'alembic revision --autogenerate -m "First migration"'
migrate = "alembic upgrade head"
initialize = "python -m app.initial_data"
uvicorn = "uvicorn app.main:app --port 8000 --host 0"
worker = "arq app.worker.WorkerSettings"
ofm-pre-start = "python -m app.ofm_pre_start"

[tool.flake8]
ignore = "W503"
max-line-length = 79
paths = ["./app"]
max-complexity = 10
exclude = "app/infrastructure/db/migrations/versions/*.py"
per-file-ignores = [
    "__init__.py:F401",
]

[tool.coverage.run]
omit = [
    ".*",
    "tests/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"**/migrations/versions/*" = ["N999"]

[tool.mypy]
exclude = ["/Scripts/"]

[[tool.mypy.overrides]]
module = "app.infrastructure.db.migrations.versions.*"
disable_error_code = ["var-annotated"]

[[tool.mypy.overrides]]
module = [
    "app.infrastructure.db.dao.sql.querysets.*",
    "app.infrastructure.db.dao.sql.ofm.querysets.*",
    "app.infrastructure.db.dao.sql.reporters.querysets.*",
    "app.infrastructure.db.dao.local.main_table",
    "app.infrastructure.db.dao.local.regex_replace",
    "app.infrastructure.db.models.local.base",
]
disable_error_code = ["attr-defined"]

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "app.core.services.entrypoints.db",
    "app.infrastructure.holder",
    "app.infrastructure.redis.dao",
]
disable_error_code = ["union-attr", "arg-type"]

[[tool.mypy.overrides]]
module = [
    "app.api.dependencies.db",
    "app.infrastructure.db.models.local.inj_well_database",
    "app.infrastructure.db.models.local.monthly_report",
    "app.infrastructure.db.models.local.neighborhood",
    "app.infrastructure.db.models.local.new_strategy_inj",
    "app.infrastructure.db.models.local.new_strategy_oil",
    "app.infrastructure.db.models.local.well_profile",
]
disable_error_code = ["misc"]

[[tool.mypy.overrides]]
module = ["testcontainers.*", "csv_diff.*"]
ignore_missing_imports = true
