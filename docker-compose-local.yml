version: '3.8'

services:
  db:
    profiles: [ "api", "migration" ]
    image: postgres:latest
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    profiles: [ "pgadmin" ]
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    ports:
      - 5050:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_started
    environment:
      - DB_HOST=db
    env_file:
      - ./.env

  redis:
    profiles: [ "api" ]
    image: redis:latest
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    profiles: [ "api" ]
    restart: unless-stopped
    ports:
      - 8000:8000
    build: ./
    volumes:
      - ./files:/app/files
    environment:
      - DB_HOST=db
      - REDIS_HOST=redis
      - API_HOST=0
      - API_PORT=8000
    env_file:
      - ./.env
    depends_on:
      worker:
        condition: service_healthy
    entrypoint: /app/scripts/backend-start.sh

  migration:
    profiles: [ "migration" ]
    restart: on-failure
    build: ./
    environment:
      - DB_HOST=db
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
    entrypoint: /app/scripts/migration-start.sh

  worker:
    profiles: [ "api" ]
    restart: unless-stopped
    build:
      dockerfile: worker.Dockerfile
    volumes:
      - ./files:/app/files
    environment:
      - DB_HOST=db
      - REDIS_HOST=redis
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    entrypoint: /app/scripts/worker-start.sh
    healthcheck:
      test: ["CMD-SHELL", "arq --check app.worker.WorkerSettings"]
      interval: 50s
      timeout: 5s
      retries: 5

volumes:
  db_data:
  pgadmin_data:
  redis_data:
